import PySimpleGUI as Sg

demodulator_selector = [Sg.Radio("Demodulator 1", 
                                 group_id=3,
                                 default=False,
                                 key="__CAL_DEM__1",
                                 enable_events=True),
                        Sg.Radio("Demodulator 2",
                                 group_id=3,
                                 default=False,
                                 key="__CAL_DEM__2",
                                 enable_events=True)]
sig_gen = [Sg.Button("Connect", 
                     size=(10, None),
                     enable_events=True,
                     key="__CAL_SIGGENCON__")]
filter_settling = [Sg.Text("Settling time (ms)",
                           size=(15, None)),
                   Sg.Input("50",
                            size=(5, None))]
frequency_range = [Sg.Text("Start (kHz)",
                           size=(10, None,)),
                   Sg.Input("1",
                           size=(5, None,),
                           key="FRE_SWE_STA"),
                   Sg.Text("Stop (kHz)",
                           size=(10, None,)),
                   Sg.Input("10",
                           size=(5, None,),
                           key="FRE_SWE_STO"),
                   Sg.Text("Step (kHz)",
                           size=(10, None,)),
                   Sg.Input("1",
                           size=(5, None,),
                           key="FRE_SWE_STE"),]

amplitude_range = [Sg.Text("Start (mV)",
                           size=(10, None,)),
                   Sg.Input("20",
                           size=(5, None,),
                           key="AMP_SWE_STA"),
                   Sg.Text("Stop (mV)",
                           size=(10, None,)),
                   Sg.Input("2000",
                           size=(5, None,),
                           key="AMP_SWE_STO"),
                   Sg.Text("Step (mV)",
                           size=(10, None,)),
                   Sg.Input("20",
                           size=(5, None,),
                           key="AMP_SWE_STE"),
                   Sg.Button("Start", 
                             size=(10, None),
                             enable_events=True, 
                             key="__CAL_START_AMP_SWEEP__"),
                   Sg.Button("Stop", 
                             size=(10, None),
                             enable_events=True, 
                             key="__CAL_STOP_AMP_SWEEP__")]

phase_range = [Sg.Text("Start (mV)",
                       size=(10, None)),
               Sg.Input("0",
                        size=(5, None),
                        key="PHA_SWE_STA"),
               Sg.Text("Stop (mV)",
                       size=(10, None)),
               Sg.Input("180",
                        size=(5, None),
                        key="PHA_SWE_STO"),
               Sg.Text("Step",
                       size=(10, None)),
               Sg.Input("1",
                        size=(5, None),
                        key="PHA_SWE_STE"),
                   Sg.Button("Start", 
                             size=(10, None),
                             enable_events=True, 
                             key="__CAL_START_PHA_SWEEP__"),
                   Sg.Button("Stop", 
                             size=(10, None),
                             enable_events=True, 
                             key="__CAL_STOP_PHA_SWEEP__")]

calibration_frame = Sg.Frame("Demodulator",
                             layout=[demodulator_selector + sig_gen, 
                                     filter_settling])
frequency_frame = Sg.Frame("Frequency Range",
                             layout=[frequency_range])
amplitude_frame = Sg.Frame("Amplitude Sweep",
                           layout=[amplitude_range])
phase_frame = Sg.Frame("Phase Sweep",
                       layout=[phase_range])

calibration_tab = Sg.Tab("Demodulator Calibration",
                         layout=[[calibration_frame],
                                 [frequency_frame],
                                 [amplitude_frame],
                                 [phase_frame]])
